// This is a temporary file to continue the PerpetualFutures component

        {/* Trading Panel */}
        <div className="space-y-6">
          {/* Balance and Network Information */}
          <Card>
            <CardContent className="p-4">
              <div className="space-y-4">
                {/* Cross-Chain Style Balance Display */}
                <div className="flex items-center justify-between p-4 bg-muted/50 rounded-lg">
                  <div className="flex items-center gap-3">
                    <div className="w-8 h-8 rounded-full bg-dex-blue/10 flex items-center justify-center">
                      <DollarSign className="w-4 h-4 text-dex-blue" />
                    </div>
                    <div>
                      <div className="text-sm text-muted-foreground">Available Balance</div>
                      <div className="font-medium">${availableBalance.toFixed(2)} USDT</div>
                    </div>
                  </div>
                  <div className="text-right">
                    <div className="text-sm text-muted-foreground">Network</div>
                    <div className="flex items-center gap-1">
                      <span className="text-sm">{currentNetwork?.logo}</span>
                      <span className="font-medium text-sm">{currentNetwork?.name}</span>
                    </div>
                  </div>
                </div>

                {/* Network Stats */}
                <div className="grid grid-cols-3 gap-4 text-sm">
                  <div>
                    <div className="text-muted-foreground">Max Leverage</div>
                    <div className="font-medium">{currentNetwork?.maxLeverage}x</div>
                  </div>
                  <div>
                    <div className="text-muted-foreground">Avg Fee</div>
                    <div className="font-medium">{currentNetwork?.avgGasFee}</div>
                  </div>
                  <div>
                    <div className="text-muted-foreground">Block Time</div>
                    <div className="font-medium">{currentNetwork?.blockTime}</div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Order Book */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center justify-between">
                <span>Order Book</span>
                <Badge variant="outline" className="text-xs">
                  <Activity className="w-3 h-3 mr-1" />
                  Live
                </Badge>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="bg-card border border-border rounded-lg overflow-hidden">
                  <div className="grid grid-cols-3 gap-2 p-3 bg-muted text-xs font-medium text-muted-foreground">
                    <div>Price (USDT)</div>
                    <div className="text-center">Size</div>
                    <div className="text-right">Total</div>
                  </div>
                  
                  {/* Sell Orders (Red) */}
                  {orderBookData.slice().reverse().map((order, index) => (
                    <div key={`ask-${index}`} className="grid grid-cols-3 gap-2 p-3 text-xs hover:bg-dex-danger/5 transition-colors border-b border-border/50">
                      <div className="text-dex-danger font-mono">{order.askPrice}</div>
                      <div className="text-center font-mono">{order.askVolume}</div>
                      <div className="text-right font-mono">{(parseFloat(order.askPrice) * parseFloat(order.askVolume)).toFixed(2)}</div>
                    </div>
                  ))}
                  
                  {/* Current Price Divider */}
                  <div className="flex items-center justify-center p-4 bg-muted/50 border-y border-border">
                    <div className="text-lg font-bold text-foreground">
                      ${currentPrice.toFixed(2)}
                    </div>
                  </div>
                  
                  {/* Buy Orders (Green) */}
                  {orderBookData.map((order, index) => (
                    <div key={`bid-${index}`} className="grid grid-cols-3 gap-2 p-3 text-xs hover:bg-dex-success/5 transition-colors border-b border-border/50 last:border-b-0">
                      <div className="text-dex-success font-mono">{order.bidPrice}</div>
                      <div className="text-center font-mono">{order.bidVolume}</div>
                      <div className="text-right font-mono">{(parseFloat(order.bidPrice) * parseFloat(order.bidVolume)).toFixed(2)}</div>
                    </div>
                  ))}
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Trading Form */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center justify-between">
                <span>Open Position</span>
                <div className="flex items-center gap-2">
                  {/* Margin Mode Selector */}
                  <Select value={marginMode} onValueChange={(value: 'isolated' | 'cross') => setMarginMode(value)}>
                    <SelectTrigger className="w-24 h-8 text-xs">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="isolated">
                        <div className="flex items-center gap-2">
                          <span className="text-orange-600">●</span>
                          <span>Isolated</span>
                        </div>
                      </SelectItem>
                      <SelectItem value="cross">
                        <div className="flex items-center gap-2">
                          <span className="text-blue-600">●</span>
                          <span>Cross</span>
                        </div>
                      </SelectItem>
                    </SelectContent>
                  </Select>
                  <TooltipProvider>
                    <Tooltip>
                      <TooltipTrigger>
                        <Info className="w-4 h-4 text-muted-foreground" />
                      </TooltipTrigger>
                      <TooltipContent>
                        <p>Isolated: Risk limited to position margin</p>
                        <p>Cross: Uses entire account balance</p>
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>
                </div>
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {/* Long/Short Selection */}
              <div className="grid grid-cols-2 gap-2">
                <Button
                  variant={position === 'long' ? 'default' : 'outline'}
                  className={`h-12 ${position === 'long' ? 'bg-dex-success hover:bg-dex-success/90' : 'hover:bg-dex-success/10'}`}
                  onClick={() => setPosition('long')}
                >
                  <TrendingUp className="w-4 h-4 mr-2" />
                  Long
                </Button>
                <Button
                  variant={position === 'short' ? 'default' : 'outline'}
                  className={`h-12 ${position === 'short' ? 'bg-dex-danger hover:bg-dex-danger/90' : 'hover:bg-dex-danger/10'}`}
                  onClick={() => setPosition('short')}
                >
                  <TrendingDown className="w-4 h-4 mr-2" />
                  Short
                </Button>
              </div>

              {/* Order Type */}
              <div className="space-y-2">
                <Label>Order Type</Label>
                <Select value={orderType} onValueChange={(value: 'market' | 'limit') => setOrderType(value)}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="market">Market Order</SelectItem>
                    <SelectItem value="limit">Limit Order</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              {/* Limit Price (only for limit orders) */}
              {orderType === 'limit' && (
                <div className="space-y-2">
                  <Label>Limit Price (USDT)</Label>
                  <Input
                    type="number"
                    value={limitPrice}
                    onChange={(e) => setLimitPrice(e.target.value)}
                    placeholder="Enter limit price"
                    step="0.01"
                  />
                </div>
              )}

              {/* Position Size (Margin) Input */}
              <div className="space-y-2">
                <Label>Position Size (Margin) - USDT</Label>
                <Input
                  type="number"
                  value={positionSizeUSDT}
                  onChange={(e) => handlePositionSizeChange(e.target.value)}
                  placeholder="Enter margin amount"
                  step="0.01"
                  min="10"
                  max={availableBalance}
                />
                <div className="text-xs text-muted-foreground">
                  This is your margin (risk amount), not total position value
                </div>
              </div>

              {/* Position Size Percentage Slider */}
              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <Label>Position Size (%)</Label>
                  <span className="text-sm text-muted-foreground">{positionPercentage[0]}%</span>
                </div>
                <Slider
                  value={positionPercentage}
                  onValueChange={handlePercentageChange}
                  max={100}
                  min={1}
                  step={1}
                  className="w-full"
                />
                <div className="flex justify-between text-xs text-muted-foreground">
                  <span>1%</span>
                  <span>25%</span>
                  <span>50%</span>
                  <span>75%</span>
                  <span>100%</span>
                </div>
              </div>

              {/* Leverage Slider */}
              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <Label>Leverage</Label>
                  <span className="text-sm font-mono">{leverage[0]}x</span>
                </div>
                <Slider
                  value={leverage}
                  onValueChange={handleLeverageChange}
                  max={currentNetwork?.maxLeverage || 100}
                  min={1}
                  step={1}
                  className="w-full"
                />
                <div className="flex justify-between text-xs text-muted-foreground">
                  <span>1x</span>
                  <span>{Math.floor((currentNetwork?.maxLeverage || 100) / 4)}x</span>
                  <span>{Math.floor((currentNetwork?.maxLeverage || 100) / 2)}x</span>
                  <span>{Math.floor((currentNetwork?.maxLeverage || 100) * 3 / 4)}x</span>
                  <span>{currentNetwork?.maxLeverage}x</span>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}